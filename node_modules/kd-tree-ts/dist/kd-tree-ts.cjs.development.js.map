{"version":3,"file":"kd-tree-ts.cjs.development.js","sources":["../src/kdNode.ts","../src/tools/distance.ts","../src/rect.ts","../src/tools/pq.ts","../src/kdTree.ts"],"sourcesContent":["import { Point2D } from './types/point2d';\n\nexport interface INode {\n  point: Point2D;\n  left: Node;\n  right: Node;\n  parent: Node;\n}\n\nexport type Node = INode | undefined;\n\nclass KDNode implements INode {\n  left: Node;\n  right: Node;\n  parent: Node;\n\n  constructor(public point: Point2D) {}\n\n  toString() {\n    return this.point.toString();\n  }\n}\n\nexport default KDNode;\n","import { Point2D } from '../types/point2d';\n\nfunction distance(a: Point2D, b: Point2D): number {\n  return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));\n}\n\nexport default distance;\n","import { Point2D } from './types/point2d';\nimport { Rect2d } from './types/rect2d';\n\nclass Rect {\n  static contains(rect: Rect2d, point: Point2D): boolean {\n    for (let i = 0; i < point.length; i++) {\n      if (point[i] > rect[1][i] || point[i] < rect[0][i]) return false;\n    }\n    return true;\n  }\n\n  static intersects(rectA: Rect2d, rectB: Rect2d): boolean {\n    for (let i = 0; i < rectA[0].length; i++) {\n      if (rectA[0][i] > rectB[1][i] || rectA[1][i] < rectB[0][i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static clone(rect: Rect2d): Rect2d {\n    return [[...rect[0]], [...rect[1]]];\n  }\n}\n\nexport default Rect;\n","export interface PqItem<T> {\n  value: T;\n  priority: number;\n}\n\nclass PQ<T> {\n  private data: PqItem<T>[] = [];\n  private lessThan(a: PqItem<T>, b: PqItem<T>): boolean {\n    if (!b) return false;\n    return a.priority < b.priority;\n  }\n\n  constructor(readonly capacity: number) {}\n\n  get size(): number {\n    return this.data.length;\n  }\n\n  get values(): T[] {\n    return this.data.map(({ value }) => value);\n  }\n\n  get top(): PqItem<T> {\n    return this.data[0];\n  }\n\n  get maxPriority(): number {\n    return this.data[0] && this.data[0].priority;\n  }\n\n  siftUp(i: number): void {\n    while (\n      i > 0 &&\n      this.lessThan(this.data[Math.floor((i - 1) / 2)], this.data[i])\n    ) {\n      const parent = Math.floor((i - 1) / 2);\n      [this.data[parent], this.data[i]] = [this.data[i], this.data[parent]];\n      i = parent;\n    }\n  }\n\n  siftDown(i: number): void {\n    const n = this.data.length;\n\n    while (i * 2 + 1 < n) {\n      let max = i;\n\n      if (this.lessThan(this.data[max], this.data[i * 2 + 1])) {\n        max = i * 2 + 1;\n      }\n      if (this.lessThan(this.data[max], this.data[i * 2 + 2])) {\n        max = i * 2 + 2;\n      }\n      if (max === i) break;\n\n      [this.data[i], this.data[max]] = [this.data[max], this.data[i]];\n      i = max;\n    }\n  }\n\n  push(value: PqItem<T>) {\n    if (this.capacity > this.size) {\n      this.data.push(value);\n      this.siftUp(this.data.length - 1);\n      return;\n    }\n    if (this.lessThan(this.top, value)) {\n      return;\n    }\n    this.data[0] = value;\n    this.siftDown(0);\n  }\n}\n\nexport default PQ;\n","import KDNode, { Node } from './kdNode';\nimport { Point2D } from './types/point2d';\nimport distance from './tools/distance';\nimport Rect from './rect';\nimport { Rect2d } from './types/rect2d';\nimport PQ from './tools/pq';\n\nclass KDTree {\n  root: Node;\n  constructor(readonly points?: Point2D[], private dimensions: number = 2) {\n    const buildTree = (points: Point2D[] = [], depth = 0, parent?: Node) => {\n      if (!points.length) {\n        return;\n      }\n      const axis = depth % this.dimensions;\n      points.sort((a, b) => a[axis] - b[axis]);\n\n      const median = Math.floor(points.length / 2);\n      const node = new KDNode(points[median]);\n\n      node.parent = parent;\n      node.left = buildTree(points.slice(0, median), axis + 1, node);\n      node.right = buildTree(points.slice(median + 1), axis + 1, node);\n      return node;\n    };\n\n    this.root = buildTree(points);\n  }\n\n  insert(point: Point2D) {\n    if (!this.root) {\n      this.root = new KDNode(point);\n      return this.root;\n    }\n    let node = this.root;\n    let cd = 0;\n    while (node) {\n      if (point[cd] < node.point[cd]) {\n        cd = (cd + 1) % this.dimensions;\n        if (!node.left) {\n          const newNode = new KDNode(point);\n          node.left = newNode;\n          newNode.parent = node;\n          return newNode;\n        }\n        node = node.left;\n      } else {\n        cd = (cd + 1) % this.dimensions;\n        if (!node.right) {\n          const newNode = new KDNode(point);\n          node.right = newNode;\n          newNode.parent = node;\n          return newNode;\n        }\n        node = node.right;\n      }\n    }\n    return node;\n  }\n\n  nearest(point: Point2D, k: number = 1) {\n    const nearest = new PQ<Point2D>(k);\n\n    const distanceToBb = (point: Point2D, bB: KDNode, cd: number): number => {\n      return Math.abs(bB.point[cd] - point[cd]);\n    };\n\n    const search = (point: Point2D, node: Node, cd: number): void => {\n      if (!node) {\n        return;\n      }\n      const curDist = distance(point, node.point);\n      nearest.push({ value: node.point, priority: curDist });\n\n      let first, last;\n      if (point[cd] < node.point[cd]) {\n        first = node.left;\n        last = node.right;\n      } else {\n        first = node.right;\n        last = node.left;\n      }\n\n      search(point, first, (cd + 1) % this.dimensions);\n      const distToBb = distanceToBb(point, node, cd);\n      if (nearest.size < nearest.capacity || distToBb < nearest.maxPriority) {\n        search(point, last, (cd + 1) % this.dimensions);\n      }\n    };\n\n    search(point, this.root, 0);\n\n    return nearest.values;\n  }\n\n  rangeSearch(rect: Rect2d): Point2D[] | [] {\n    const result: Point2D[] = [];\n\n    if (!this.root) {\n      return result;\n    }\n\n    const search = (\n      node: Node,\n      box: Rect2d = [\n        [-Infinity, -Infinity],\n        [Infinity, Infinity],\n      ],\n      cd: number = 0\n    ): void => {\n      if (node === undefined) {\n        return;\n      }\n      const { point } = node;\n      if (Rect.contains(rect, node.point)) {\n        result.push(point);\n      }\n      const leftBox: Rect2d = Rect.clone(box);\n      leftBox[1][cd] = point[cd];\n      const rightBox: Rect2d = Rect.clone(box);\n      rightBox[0][cd] = point[cd];\n\n      cd = (cd + 1) % this.dimensions;\n      if (Rect.intersects(leftBox, rect)) {\n        search(node.left, leftBox, cd);\n      }\n      if (Rect.intersects(rightBox, rect)) {\n        search(node.right, rightBox, cd);\n      }\n    };\n\n    search(this.root);\n\n    return result;\n  }\n}\n\nexport default KDTree;\n"],"names":["KDNode","point","toString","distance","a","b","Math","sqrt","pow","Rect","contains","rect","i","length","intersects","rectA","rectB","clone","PQ","capacity","lessThan","priority","siftUp","data","floor","parent","siftDown","n","max","push","value","size","top","map","KDTree","points","dimensions","buildTree","depth","axis","sort","median","node","left","slice","right","root","insert","cd","newNode","nearest","k","distanceToBb","bB","abs","search","curDist","first","last","distToBb","maxPriority","values","rangeSearch","result","box","Infinity","undefined","leftBox","rightBox"],"mappings":"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"}